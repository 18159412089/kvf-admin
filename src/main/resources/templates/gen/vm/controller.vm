package com.kalvin.kvf.controller.sys;


import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.kalvin.kvf.comm.utils.CryptionKit;
import com.kalvin.kvf.comm.utils.ShiroKit;
import com.kalvin.kvf.controller.BaseController;
import com.kalvin.kvf.dto.R;
import com.kalvin.kvf.dto.sys.UserEditDTO;
import com.kalvin.kvf.dto.sys.UserRoleGroupDTO;
import com.kalvin.kvf.entity.sys.Dept;
import com.kalvin.kvf.entity.sys.User;
import com.kalvin.kvf.service.sys.IDeptService;
import com.kalvin.kvf.service.sys.IUserRoleService;
import com.kalvin.kvf.service.sys.IUserService;
import com.kalvin.kvf.vo.sys.UserQueryVO;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

#set($service = ${config.funName} + 'Service')
#set($class = ${config.firstCapFunName})

/**
 * <p>
 * $config.tableComment 前端控制器
 * </p>
 * @since $date
 */
@RestController
@RequestMapping("${config.moduleName}/${config.funName}")
public class $classController extends BaseController {

    @Autowired
    private I$classService $service;

    @RequiresPermissions("sys:user:index")
    @GetMapping("index")
    public ModelAndView index() {
        return new ModelAndView("${config.moduleName}/${config.funName}");
    }

    #set($addEditViewFlg = false)
    #foreach($headButton in $config.headButtons)
        #if($headButton.id == 1)
            #set($addEditViewFlg = true)
        #end
    #end
    #foreach($rowButton in $config.rowButtons)
        #if($rowButton.id == 2)
            #set($addEditViewFlg = true)
        #end
    #end
    #if($addEditViewFlg)
    @GetMapping(value = "$headButton.key")
    public ModelAndView $headButton.key(Long id) {
        ModelAndView mv = new ModelAndView("${config.moduleName}/${config.funName}_edit");
        $class ${config.funName};
        if (id == null) {
            ${config.funName} = new $class();
        } else {
            ${config.funName} = $service.getById(id);
        }
        mv.addObject("editInfo", ${config.funName});
        return mv;
    }
    #end

    @GetMapping(value = "list/data")
    public R listData($class ${config.funName}) {
        Page<$class> page = $service.list$classPage(${config.funName});
        return R.ok(page);
    }

    #foreach($headButton in $config.headButtons)
    @RequiresPermissions("$headButton.perId")
    @PostMapping(value = "$headButton.key")
    #if($headButton.id == 1)
    public R $headButton.key($class ${config.funName}) {
        $service.save(${config.funName});
        return R.ok();
    }
    #end
    #end

    @RequiresPermissions("sys:user:edit")
    @Transactional
    @PostMapping(value = "edit")
    public R edit(User user, @RequestParam("roleIds") List<Long> roleIds) {
        user.setDeptId(user.getDeptId() == null ? 0 : user.getDeptId());
        userService.updateById(user);
        userRoleService.saveOrUpdateBatchUserRole(roleIds, user.getId());
        return R.ok();
    }

    @RequiresPermissions("sys:user:del")
    @PostMapping(value = "remove/{id}")
    public R remove(@PathVariable Long id) {
        userService.removeById(id);
        return R.ok();
    }

    @RequiresPermissions("sys:user:del")
    @PostMapping(value = "removeBatch")
    public R removeBatch(@RequestParam("ids") List<Long> ids) {
        userService.removeByIds(ids);
        return R.ok();
    }

    @RequiresPermissions("sys:user:reset")
    @PostMapping(value = "resetPwd")
    public R resetPwd() {
        return this.changePwd(null, null);
    }

    @PostMapping(value = "changePwd")
    public R changePwd(String oldPassword, String password) {
        if (StrUtil.isBlank(oldPassword) && StrUtil.isBlank(password)) {
            password = CryptionKit.genUserPwd();
        } else {
            User user = userService.getById(ShiroKit.getUserId());
            oldPassword = CryptionKit.genUserPwd(oldPassword);
            if (user.getPassword().equals(oldPassword)) {
                password = CryptionKit.genUserPwd(password);
                if (user.getPassword().equals(password)) {
                    return R.fail("新密码不能与旧密码相同");
                }
            } else {
                return R.fail("旧密码不正确");
            }
        }
        userService.update(new LambdaUpdateWrapper<User>()
                .set(User::getPassword, password)
                .eq(User::getId, ShiroKit.getUserId()));
        return R.ok();
    }

}

